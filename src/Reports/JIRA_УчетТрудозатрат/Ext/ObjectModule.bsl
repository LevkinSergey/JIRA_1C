
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПустаяСтрока(КлючВариантаНастроек) Тогда
		Вариант = СхемаКомпоновкиДанных.ВариантыНастроек[КлючВариантаНастроек];
		КомпоновщикНастроек.ЗагрузитьНастройки(Вариант.Настройки)
	КонецЕсли;
	
	НастройкиПоУмолчанию = КомпоновщикНастроек.ПолучитьНастройки();
		
	Если НастройкиПоУмолчанию.Структура.Количество() > 0 Тогда
		ГруппировкаПоНаправлению = НастройкиПоУмолчанию.Структура.Получить(0);
		Если ТипЗнч(ГруппировкаПоНаправлению) = Тип("ГруппировкаКомпоновкиДанных") 
			И ГруппировкаПоНаправлению.Структура.Количество() > 0 Тогда
			ГруппировкаПоИсполнителю = ГруппировкаПоНаправлению.Структура.Получить(0);
			УстановитьУсловноеОформление(НастройкиПоУмолчанию, ГруппировкаПоИсполнителю.УсловноеОформление);
		КонецЕсли;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиПоУмолчанию, ДанныеРасшифровки);
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ДокументРезультат.Рисунки.Количество() > 0 Тогда 
		ДокументРезультат.Рисунки[0].Ширина = 400;
	КонецЕсли;
	//ДокументРезультат.Рисунки[0].Высота = 150;

КонецПроцедуры

Процедура УстановитьУсловноеОформление(НастройкиПоУмолчанию, УсловноеОформление)
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ЗатраченоВремени");
	
	УсловноеОформление.Элементы.Очистить();
	
	//Установка градиента для колонки
	НачальныйЦвет = новый Цвет(100, 190, 123);
	КонечныйЦвет = Новый Цвет(160, 190, 125);
	
	МаксимальноеЗначение = ОпределитьМаксимальноеЗначениеТрудозатрат(НастройкиПоУмолчанию);
	
	КоличествоГрадаций = МаксимальноеЗначение;
	
	ШагКрасного = (КонечныйЦвет.Красный - НачальныйЦвет.Красный) / КоличествоГрадаций * 2;
	ШагЗеленого = (КонечныйЦвет.Зеленый - НачальныйЦвет.Зеленый) / КоличествоГрадаций * 2;
	//ШагСинего = (КонечныйЦвет.Синий - НачальныйЦвет.Синий) / КоличествоГрадаций;
	
	ТекКрасный = НачальныйЦвет.Красный;
	ТекЗеленый = НачальныйЦвет.Зеленый;
	ТекСиний = НачальныйЦвет.Синий;
	
	
	Для ТекущееЗначение = 0 по МаксимальноеЗначение  цикл
		ЗначениеРесурса = МаксимальноеЗначение - ТекущееЗначение;
		Для каждого ИмяПоля из МассивПолей цикл
			НайденноеПоле = НастройкиПоУмолчанию.Выбор.ДоступныеПоляВыбора.Элементы.Найти(ИмяПоля);
			Если НайденноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТекКрасный + ШагКрасного >= 255 Тогда 
				ТекЗеленый = ТекЗеленый + ШагЗеленого;
			Иначе
				ТекКрасный = ТекКрасный + ШагКрасного;
			КонецЕсли;
			
			НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
			НовоеУсловноеОформление.Использование = Истина;
			
			НоваяГруппаОтбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйОтборОт = НоваяГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтборОт.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			НовыйОтборОт.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			НовыйОтборОт.ПравоеЗначение = ЗначениеРесурса;
			Если ЗначениеРесурса <> МаксимальноеЗначение Тогда
				НовыйОтборДо = НоваяГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтборДо.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				НовыйОтборДо.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
				НовыйОтборДо.ПравоеЗначение = ЗначениеРесурса+1;
			КонецЕсли;
			
			НовоеОформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветФона");
			НовоеОформление.Значение = Новый Цвет(Окр(ТекКрасный,0), Окр(ТекЗеленый,0), Окр(ТекСиний,0));
			НовоеОформление.Использование = Истина;
			//ПолеОформления = НовоеУсловноеОформление.Поля.Элементы.Добавить();
			//ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			//ПолеОформления.Использование = Истина;
			
			НовоеУсловноеОформление.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
			НовоеУсловноеОформление.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовоеУсловноеОформление.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовоеУсловноеОформление.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовоеУсловноеОформление.ИспользоватьВОбщемИтоге = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовоеУсловноеОформление.ИспользоватьВОтборе = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			НовоеУсловноеОформление.ИспользоватьВПараметрах = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ОпределитьМаксимальноеЗначениеТрудозатрат(НастройкиПоУмолчанию)
	
	Период = НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Найти("Период");
	
	ДатаНачала = Период.Значение.ДатаНачала;
	ДатаОкончания = Период.Значение.ДатаОкончания;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СУММА(JIRA_ЖурналРабот.ЗатраченоВремени / 60 / 60) КАК ЗатраченоВремени,
		|	JIRA_ЖурналРабот.Автор
		|ИЗ
		|	РегистрСведений.JIRA_ЖурналРабот КАК JIRA_ЖурналРабот
		|ГДЕ
		|	JIRA_ЖурналРабот.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	JIRA_ЖурналРабот.Автор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗатраченоВремени УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗатраченоВремени = РезультатЗапроса.ЗатраченоВремени;
	Иначе
		ЗатраченоВремени = 0;
	КонецЕсли;
	
	Возврат ЗатраченоВремени; 
	
КонецФункции